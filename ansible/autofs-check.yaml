---
- name: Ensure autofs is configured with required flags
  hosts: all
  become: yes
  gather_facts: yes

  vars:
    desired_flags: "--timeout=60 --ghost"
    backup_suffix: ".bak_{{ ansible_date_time.iso8601_basic_short }}"

  tasks:

    - name: Gather package facts
      ansible.builtin.package_facts:
        manager: auto

    - name: Set autofs_installed variable
      ansible.builtin.set_fact:
        autofs_installed: "{{ 'autofs' in ansible_facts.packages }}"

    - name: Skip playbook if autofs is not installed
      ansible.builtin.debug:
        msg: "Autofs is not installed. Skipping configuration tasks."
      when: not autofs_installed

    - name: Backup /etc/auto.master before modification
      ansible.builtin.copy:
        src: /etc/auto.master
        dest: "/etc/auto.master{{ backup_suffix }}"
        remote_src: yes
      when: autofs_installed

    - name: Read /etc/auto.master
      ansible.builtin.slurp:
        src: /etc/auto.master
      register: auto_master_content
      when: autofs_installed

    - name: Decode /etc/auto.master content
      ansible.builtin.set_fact:
        auto_master_text: "{{ auto_master_content.content | b64decode }}"
      when: autofs_installed

    - name: Fix flags in /etc/auto.master using Python script
      ansible.builtin.copy:
        dest: /tmp/fix_auto_master.py
        mode: '0755'
        content: |
          import sys
          import re

          def is_mount_entry(line):
              """Verifica se a linha é uma entrada de montagem válida"""
              # Remove comentários inline se existirem
              line = line.split('#')[0].strip()
              parts = line.split()
              # Deve começar com / e ter pelo menos 1 campos
              return len(parts) >= 1 and parts[0].startswith('/')

          def add_missing_flags(line):
              """Adiciona flags ausentes apenas em entradas de montagem"""
              if not is_mount_entry(line):
                  return line
                  
              # Remove comentários inline preservando-os
              main_part, *comments = line.split('#', 1)
              parts = main_part.split()
              
              # Adiciona flags apenas se não existirem
              if "--timeout" not in main_part:
                  parts.append("--timeout=60")
              if "--ghost" not in main_part:
                  parts.append("--ghost")
                  
              # Reconstrói a linha com comentários se existirem
              result = ' '.join(parts)
              if comments:
                  result += ' #' + comments[0]
              return result

          def process_file():
              content = sys.stdin.read()
              if not content.strip():
                  print("Error: Empty input file", file=sys.stderr)
                  sys.exit(1)

              lines = content.splitlines()
              processed_lines = [add_missing_flags(line) for line in lines]
              print('\n'.join(processed_lines))

          if __name__ == "__main__":
              try:
                  process_file()
              except Exception as e:
                  print(f"Error: {str(e)}", file=sys.stderr)
                  sys.exit(1)
      when: autofs_installed

    - name: Generate new_auto_master using Python script
      ansible.builtin.command:
        cmd: python3 /tmp/fix_auto_master.py
        stdin: "{{ auto_master_text }}"
      register: fixed_auto_master
      when: autofs_installed

    - name: Update /etc/auto.master if necessary
      ansible.builtin.copy:
        dest: /etc/auto.master
        content: "{{ fixed_auto_master.stdout }}"
        owner: root
        group: root
        mode: '0644'
      when: autofs_installed and auto_master_text != fixed_auto_master.stdout

    - name: Restart autofs if changes were made
      ansible.builtin.service:
        name: autofs
        state: restarted
      when: autofs_installed and auto_master_text != fixed_auto_master.stdout

    - name: Show result if autofs was installed
      ansible.builtin.debug:
        msg: >-
          /etc/auto.master checked and updated if necessary.
          Backup: /etc/auto.master{{ backup_suffix }}
      when: autofs_installed
